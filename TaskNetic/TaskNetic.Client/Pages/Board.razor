@page "/board/{projectId:int}"
@using Blazorise
@using TaskNetic.Client.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IUserService UserService
@inject IProjectService ProjectService
@using static TaskNetic.Client.Models.BoardModel
@using TaskNetic.Client.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))


<AuthorizeView>
    <Authorized>

        @if (isLoading)
        {
            <div class="spinner-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!isAuthorized)
        {
            <p>You do not have permission to view this board.</p>
        }
        else
        {
            <div style="background-image: @(string.IsNullOrEmpty(projectInfo?.BackgroundId) ? "linear-gradient(135deg, #00c6ff, #7a2fff)"
    : $"url('images/backgrounds/background{projectInfo.BackgroundId}.jpg')"); flex-grow: 1; background-size: cover;">
                <div class="navbar-container">
                    <nav class="navbar navbar-expand-lg navbar-light transparent-navbar">
                        <div class="container-fluid justify-content-start">

                            <a class="navbar-brand text-white mx-5" href="#">@projectInfo.Name</a>

                            <ul class="nav nav-tabs">
                                @foreach (var board in boards)
                                {
                                    <li class="nav-item" @onclick:stopPropagation>
                                        <div class="nav-link @(currentBoard?.BoardId == board.BoardId ? "active" : "")"
                                             @onclick="@(() => SwitchBoard(board))">
                                            @board.Title
                                            @if (currentBoard?.BoardId == board.BoardId && isUserAdmin)
                                            {
                                                <img src="images/edit.svg" alt="Edit Board" @onclick="ShowEditBoardModal" class="editBoard-button" />
                                            }

                                        </div>
                                    </li>
                                }

                                @if (isUserAdmin)
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-white" @onclick="() => isCreateBoardModalVisible = true">+</a>
                                    </li>
                                }
                            </ul>
                        </div>
                        <!-- Modal -->
                        @if (isCreateBoardModalVisible)
                        {
                            <div class="modal-overlay">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5>Create new board</h5>
                                        <button class="close-button mb-2" @onclick="() => isCreateBoardModalVisible = false">×</button>
                                    </div>
                                    <div class="modal-body mb-3">
                                        <input type="text" placeholder="Board name" @bind="newBoardName" class="form-control" />
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-success" @onclick="CreateBoard">Create board</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </nav>
                </div>

                @if (currentBoard != null && isEditBoardModalVisible)
                {
                    <EditBoardModal IsVisible="@isEditBoardModalVisible"
                                    IsVisibleChanged="@((value) => isEditBoardModalVisible = value)"
                                    OnRemove="@OnBoardRemove"
                                    projectId="@projectId"
                                    Board="@currentBoard" />
                }


                <div class="list-container d-flex column-gap-3">
                    @if (Lists != null && Cards != null)
                    {
                        <DropContainer TItem="CardModel" Items="Cards" ItemDropped="OnCardDropped" ItemsFilter="@FilterItems" Class="blazorise-container" @ref="dropContainer" ItemDisabled="IsCardDisabled">
                            <ChildContent>
                                @foreach (var list in Lists)
                                {
                                    <Div Class="d-flex flex-column">
                                        <DropZone TItem="CardModel" Name="@list.Id.ToString()" AllowReorder="@canUserEdit" Reordered="OnReordered" Class="card-list rounded-bottom-0">
                                            <Heading Size="HeadingSize.Is5" Margin="Margin.Is3.FromBottom" Style="display:flex; justify-content:space-between">
                                                <ListTitle Title="@list.Title" ListId="@list.Id" @ref="listTitleRefs[list.Id]"/>
                                                @if(canUserEdit)
                                                {
                                                <Dropdown>
                                                    <DropdownToggle ToggleIconVisible="false">
                                                        <img src="images/three-dots.svg" height="18" width="18" alt="options" style="cursor: pointer;" />
                                                    </DropdownToggle>
                                                    <DropdownMenu>
                                                        <DropdownItem Header>
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <h6 class="flex-fill text-center fw-semibold mb-0">List Menu</h6>
                                                                <button class="btn-close" style="width: 10px; height: 10px;"></button>
                                                            </div>
                                                        </DropdownItem>
                                                        <DropdownItem @onclick="() => EditListTitle(list.Id)">Change Title</DropdownItem>
                                                        <DropdownItem @onclick="() => ShowAddCard(list.Id)">Add Card</DropdownItem>
                                                        <DropdownItem @onclick="() => MoveListLeft(list.Id)">Move Left</DropdownItem>
                                                        <DropdownItem @onclick="() => MoveListRight(list.Id)">Move Right</DropdownItem>
                                                        <DropdownItem @onclick="() => DeleteList(list.Id)" Class="text-danger">Delete List</DropdownItem>
                                                    </DropdownMenu>
                                                </Dropdown>
                                                }

                                            </Heading>
                                        </DropZone>
                                        @if(canUserEdit)
                                        {
                                            <AddCard ListId="@list.Id" OnCardAdded="async () => await LoadLists()" @ref="listAddRefs[list.Id]"/>
                                        }
                                        else
                                        {
                                            <div class="rounded-bottom-2 w-100 add-card-placeholder" style="height: 20px;"></div>
                                        }
                                    </Div>
                                }
                            </ChildContent>
                            <ItemTemplate Context="cardContext">
                                <div class="card-item" @onclick="() => OpenCardModal(cardContext.CardId)">
                                    @cardContext.CardTitle
                                </div>
                            </ItemTemplate>
                        </DropContainer>

                    }
                    <div class="add-list">
                        @if (canUserEdit)
                        {
                            @if (IsListAddInputVisible)
                            {
                                <div class="add-list-input rounded-2 px-2 py-3">
                                    <input type="text" @bind="newListName" placeholder="Enter list name" class="form-control" />
                                    <div class="d-flex w-100 justify-content-between align-items-center mt-2 px-2">
                                        <button class="btn btn-primary btn-sm w-50" @onclick="AddList">Add List</button>
                                        <button type="button" class="btn-close" aria-label="Close" @onclick="() => IsListAddInputVisible = false"></button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="add-list-button rounded-2" style="text-decoration:none; cursor:pointer;" @onclick="() => IsListAddInputVisible = true"><img src="images/plus2.svg" alt="plus" /> Add new list</div>
                            }
                        }
                    </div>
                    @if (isCardModalVisible)
                    {
                        <CardModal IsVisible="isCardModalVisible" CardId="cardModalId" BoardId="currentBoard.BoardId" 
                        IsVisibleChanged="@((visible) => isCardModalVisible = visible)" OnExternalCardChanged="async () => await LoadLists()"/>
                    }
                    
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>

</AuthorizeView>

@code {
    [Parameter] public int projectId { get; set; }
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string? userId;
    private bool isUserAdmin = false;
    private bool canUserEdit = false;
    private ProjectInfo projectInfo;
    private IEnumerable<BoardModel>? boards;
    public BoardModel? currentBoard;
    private IEnumerable<List>? Lists;
    private List<CardModel> Cards { get; set; } = new();
    private Dictionary<int, int> CardToListMapping { get; set; } = new();
    private bool isCreateBoardModalVisible = false;
    private bool isEditBoardModalVisible = false;
    private bool isCardModalVisible = false;
    private int cardModalId = -1;
    private string newBoardName = string.Empty;
    private bool IsListAddInputVisible = false;
    private string newListName = string.Empty;
    private Dictionary<int, ListTitle> listTitleRefs = new();
    private Dictionary<int, AddCard> listAddRefs = new();
    private DropContainer<CardModel> dropContainer;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            projectInfo = await ProjectService.GetProjectInfoAsync(projectId);
            userId = await UserService.GetCurrentUserIdAsync();
            isUserAdmin = await UserService.IsUserAdminInProjectAsync(projectId, userId);
            await LoadBoards();
            await LoadLists();
            if(currentBoard != null)
            {
                canUserEdit = await UserService.CanUserEditBoardAsync(currentBoard.BoardId, userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            NavigationManager.NavigateTo("/error");
        }
        finally
        {
            isLoading = false;
        }

    }

    private bool IsCardDisabled(CardModel card)
    {
        return !canUserEdit;
    }

    private async Task SwitchBoard(BoardModel board)
    {
        currentBoard = board;
        canUserEdit = await UserService.CanUserEditBoardAsync(currentBoard.BoardId, userId);
        await LoadLists();
    }

    private async Task OnBoardRemove()
    {
        await LoadBoards();
        await LoadLists();
        StateHasChanged();
    }

    private async Task OnListRemove(int listId)
    {
        await LoadLists();
        StateHasChanged();
    }

    private void OpenCardModal(int cardId)
    {
        cardModalId = cardId;
        isCardModalVisible = true;
    }

    private async void CreateBoard()
    {
        if (!String.IsNullOrWhiteSpace(newBoardName))
        {
            isCreateBoardModalVisible = false;
            var response = await Http.PostAsJsonAsync($"api/boards/{projectId}/{userId}", newBoardName);
            if (response.IsSuccessStatusCode)
            {
                await LoadBoards();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
            newBoardName = string.Empty;
        }
    }

    private async Task LoadBoards()
    {
        var response = await Http.GetAsync($"api/boards/{projectId}/{userId}");
        if (response.IsSuccessStatusCode)
        {
            isAuthorized = true;
            boards = await response.Content.ReadFromJsonAsync<IEnumerable<BoardModel>>();
            currentBoard = boards.FirstOrDefault();
        }
        else
        {
            isAuthorized = false;
        }
    }

    private async Task LoadLists()
    {
        if (currentBoard != null)
        {
            Lists = null;
            Cards = new();
            CardToListMapping = new();
            var response = await Http.GetAsync($"api/lists/board/{currentBoard?.BoardId}");
            if (response.IsSuccessStatusCode)
            {
                Lists = (await response.Content.ReadFromJsonAsync<IEnumerable<List>>())?.OrderBy(list => list.Position);
                if (Lists != null)
                {
                    Cards = Lists.SelectMany(l => l.Cards).OrderBy(card => card.CardPosition).ToList();
                    CardToListMapping = Cards.ToDictionary(card => card.CardId, card => Lists.First(list => list.Cards.Contains(card)).Id);
                }

                StateHasChanged();
            }
        }
    }

    private bool FilterItems(CardModel card, string dropZone)
    {
        return CardToListMapping.TryGetValue(card.CardId, out var listId) && listId.ToString() == dropZone;
    }

    private async Task OnCardDropped(DraggableDroppedEventArgs<CardModel> args)
    {
        var card = args.Item;
        var newListId = int.Parse(args.DropZoneName);
        var sourceListId = int.Parse(args.SourceDropZoneName);
        var currentUserId = UserService.GetCurrentUserId();

        if (CardToListMapping.TryGetValue(card.CardId, out var oldListId) && oldListId != newListId)
        {
            CardToListMapping[card.CardId] = newListId;

            var oldList = Lists.FirstOrDefault(list => list.Id == oldListId);
            oldList?.Cards.Remove(card);

            var newList = Lists.FirstOrDefault(list => list.Id == newListId);
            if (newList != null)
            {
                card.CardPosition = newList.Cards.Count + 1;
                newList.Cards.Add(card);
            }

            StateHasChanged();

            await Http.PutAsJsonAsync($"api/cards/move/{card.CardId}", new MoveCardRequest { SourceListId = sourceListId, TargetListId = newListId, NewPosition = args.IndexInZone, CurrentUserId = currentUserId });

        }
    }

    private async Task OnReordered(DropZoneOrder<CardModel> order)
    {
        var reorderedCards = order.OrderedItems.Select((item) => new { item.Item, NewPosition = item.Order + 1 }).ToList();

        foreach (var reordered in reorderedCards)
        {
            reordered.Item.CardPosition = reordered.NewPosition;
        }

        var updates = reorderedCards.Select(rc => new CardPositionUpdate
            {
                CardId = rc.Item.CardId,
                CardPosition = rc.NewPosition
            });

        StateHasChanged();

        var response = await Http.PutAsJsonAsync("api/cards/update-positions", updates);
    }

    private async Task MoveListLeft(int listId)
    {
        if (Lists == null) return;

        var currentList = Lists.FirstOrDefault(l => l.Id == listId);
        if (currentList == null) return;

        var previousList = Lists.OrderBy(l => l.Position).LastOrDefault(l => l.Position < currentList.Position);
        if (previousList != null)
        {
            int tempPosition = currentList.Position;
            currentList.Position = previousList.Position;
            previousList.Position = tempPosition;

            var updates = Lists.Select(list => new MoveListsRequest
                {
                    ListId = list.Id,
                    Position = list.Position
                }).ToList();

            await UpdateListsPosition(updates);

            await LoadLists();
            dropContainer.Refresh();
        }
    }

    private async Task MoveListRight(int listId)
    {
        if (Lists == null) return;

        var currentList = Lists.FirstOrDefault(l => l.Id == listId);
        if (currentList == null) return;

        var nextList = Lists.OrderBy(l => l.Position).FirstOrDefault(l => l.Position > currentList.Position);
        if (nextList != null)
        {
            int tempPosition = currentList.Position;
            currentList.Position = nextList.Position;
            nextList.Position = tempPosition;

            var updates = Lists.Select(list => new MoveListsRequest
                {
                    ListId = list.Id,
                    Position = list.Position
                }).ToList();

            await UpdateListsPosition(updates);

            await LoadLists();
            dropContainer.Refresh();
        }
    }

    private async Task UpdateListsPosition(IEnumerable<MoveListsRequest> updates)
    {
        var response = await Http.PutAsJsonAsync("api/lists/move", updates);
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Failed to update lists.");
        }
    }


    private async Task AddList()
    {
        if (!string.IsNullOrWhiteSpace(newListName))
        {
            var request = await Http.PostAsJsonAsync($"api/lists/board/{currentBoard?.BoardId}", newListName);
            if (request.IsSuccessStatusCode)
            {
                await LoadLists();
            }
            newListName = string.Empty;
            IsListAddInputVisible = false;
        }
    }

    private void ShowEditBoardModal()
    {
        isEditBoardModalVisible = true;
    }

    private void CloseEditBoardModal()
    {
        isEditBoardModalVisible = false;
    }

    private async Task EditListTitle(int listId)
    {
        if (listTitleRefs.TryGetValue(listId, out var listComponent))
        {
            await listComponent.ShowListTitleEdit();
        }
    }

    private async Task ShowAddCard(int listId)
    {
        if(listAddRefs.TryGetValue(listId, out var listComponent))
        {
            await listComponent.ShowAddCardInput();
        }
    }

    public async Task DeleteList(int listId)
    {
        await Http.DeleteAsync($"api/lists/{listId}");
        await LoadLists();
    }
}


<style>
    .transparent-navbar {
        background-color: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(5px);
    }

        .transparent-navbar .nav-link {
            color: #fff;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            cursor: context-menu;
        }

            .transparent-navbar .nav-link.active {
                background-color: rgba(255, 255, 255, 0.4);
                color: #000;
            }

            .transparent-navbar .nav-link:hover {
                background-color: rgba(255, 255, 255, 0.2);
                color: #000;
            }

    .modal-overlay {
        position: fixed;
        top: 0px;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        width: 300px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close-button {
        background-color: transparent;
        border: none;
        font-size: 1.5rem;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
    }

    .editBoard-button {
        margin-left: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .spinner-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .list-container {
        display: flex;
        gap: 15px;
        padding: 25px;
        align-items: flex-start;
    }

    .blazorise-container {
        display: flex;
        gap: 15px;
        align-items: flex-start;
    }

    .card-list {
        width: 250px;
        background-color: #f0f2f4;
        border-radius: 5px;
        padding: 10px;
        padding-bottom: 0px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card-item {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 5px 10px;
        margin-bottom: 5px;
        transition: border-color 0.3s ease;
        cursor: pointer;
    }

    .add-card-placeholder {
        position: relative;
        bottom: 0;
        left: 0;
        right: 0;
        height: 30px; /* Matches the button height */
        background-color: #f0f2f4; /* Same background color */
        border-bottom-left-radius: 0.25rem; /* Matches "rounded-bottom-2" */
        border-bottom-right-radius: 0.25rem; /* Matches "rounded-bottom-2" */
    }


    .add-list-button {
        width: 15vw;
        background: rgba(0,0,0, 0.45);
        color: white;
        padding: 7px;
        padding-left: 15px;
    }

        .add-list-button img {
            width: 10px;
            height: 10px;
        }

    .add-list-input {
        background: #f1f2f4;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        margin: 0;
    }

</style>