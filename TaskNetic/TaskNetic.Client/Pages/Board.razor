@page "/board/{projectId:int}"
@using Blazorise
@using TaskNetic.Client.DTO
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IUserService UserService
@inject IProjectService ProjectService
@using static TaskNetic.Client.Models.BoardModel
@using TaskNetic.Client.Components
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))


<AuthorizeView>
    <Authorized>

        @if (isLoading)
        {
            <div class="spinner-container">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!isAuthorized)
        {
            <p>You do not have permission to view this board.</p>
        }
        else
        {
            <div style="background-image: @(string.IsNullOrEmpty(projectInfo?.BackgroundId) ? "linear-gradient(135deg, #00c6ff, #7a2fff)"
    : $"url('images/backgrounds/background{projectInfo.BackgroundId}.jpg')"); flex-grow: 1; background-size: cover;">
                <div class="navbar-container">
                    <nav class="navbar navbar-expand-lg navbar-light transparent-navbar">
                        <div class="container-fluid justify-content-start">

                            <a class="navbar-brand text-white mx-5" href="#">@projectInfo.Name</a>

                            <ul class="nav nav-tabs">
                                @foreach (var board in boards)
                                {
                                    <li class="nav-item" @onclick:stopPropagation>
                                        <div class="nav-link @(currentBoard?.BoardId == board.BoardId ? "active" : "")"
                                             @onclick="@(() => SwitchBoard(board))">
                                            @board.Title
                                            @if (currentBoard?.BoardId == board.BoardId && isUserAdmin)
                                            {
                                                <img src="images/edit.svg" alt="Edit Board" @onclick="ShowEditBoardModal" class="editBoard-button" />
                                            }

                                        </div>
                                    </li>
                                }

                                @if (isUserAdmin)
                                {
                                    <li class="nav-item">
                                        <a class="nav-link text-white" @onclick="ShowCreateBoardModal">+</a>
                                    </li>
                                }
                            </ul>
                        </div>
                        <!-- Modal -->
                        @if (isCreateBoardModalVisible)
                        {
                            <div class="modal-overlay">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5>Create new board</h5>
                                        <button class="close-button mb-2" @onclick="CloseCreateBoardModal">×</button>
                                    </div>
                                    <div class="modal-body mb-3">
                                        <input type="text" placeholder="Board name" @bind="newBoardName" class="form-control" />
                                    </div>
                                    <div class="modal-footer">
                                        <button class="btn btn-success" @onclick="CreateBoard">Create board</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </nav>
                </div>

                @if (currentBoard != null && isEditBoardModalVisible)
                {
                    <EditBoardModal IsVisible="@isEditBoardModalVisible"
                                    IsVisibleChanged="@((value) => isEditBoardModalVisible = value)"
                                    OnRemove="@OnBoardRemove"
                                    projectId="@projectId"
                                    Board="@currentBoard" />
                }


                <div class="list-container d-flex column-gap-3">
                    @if (Lists != null && Cards!=null)
                    {
                        <DropContainer TItem="CardModel" Items="Cards" ItemDropped="OnCardDropped" ItemsFilter="@FilterItems" Class="list-container">
                            <ChildContent>
                                @foreach (var list in Lists)
                                {
                                    <DropZone TItem="CardModel" Name="@list.Id.ToString()" AllowReorder="true" Reordered="OnReordered" Class="card-list">
                                        <Heading Size="HeadingSize.Is5" Margin="Margin.Is3.FromBottom">@list.Title</Heading>
                                    </DropZone>
                                }
                            </ChildContent>
                            <ItemTemplate Context="cardContext">
                                <div class="card-item">
                                    @cardContext.CardTitle
                                </div>
                            </ItemTemplate>
                        </DropContainer>


                    }
                    <div class="add-list">

                        @if (IsListAddInputVisible)
                        {
                            <div class="add-list-input">
                                <input type="text" @bind="newListName" placeholder="Enter list name" class="form-control" />
                                <div class="d-flex w-100 justify-content-between align-items-center mt-2 px-2">
                                    <button class="btn btn-primary btn-sm w-50" @onclick="AddList">Add List</button>
                                    <button type="button" class="btn-close" aria-label="Close" @onclick="HideAddListInput"></button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="add-list-button" style="text-decoration:none; cursor:pointer;" @onclick="ShowAddListInput"><img src="images/plus2.svg" alt="plus" /> Add new list</div>
                        }
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>

</AuthorizeView>

@code {
    [Parameter] public int projectId { get; set; }
    private bool isAuthorized = false;
    private bool isLoading = true;
    private string? userId;
    private bool isUserAdmin = false;
    private ProjectInfo projectInfo;
    private IEnumerable<BoardModel>? boards;
    public BoardModel? currentBoard;
    private IEnumerable<List>? Lists;
    private List<CardModel> Cards { get; set; } = new();
    private Dictionary<int, int> CardToListMapping { get; set; } = new();
    private bool isCreateBoardModalVisible = false;
    private bool isEditBoardModalVisible = false;
    private string newBoardName = string.Empty;
    private bool IsListAddInputVisible = false;
    private string newListName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            projectInfo = await ProjectService.GetProjectInfoAsync(projectId);
            userId = await UserService.GetCurrentUserIdAsync();
            isUserAdmin = await UserService.IsUserAdminInProjectAsync(projectId, userId);
            await LoadBoards();
            await LoadLists();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            NavigationManager.NavigateTo("/error");
        }
        finally
        {
            isLoading = false;
        }

    }

    private async Task SwitchBoard(BoardModel board)
    {
        currentBoard = board;
        await LoadLists();
    }

    private void ShowAddListInput()
    {
        IsListAddInputVisible = true;
    }

    private void HideAddListInput()
    {
        IsListAddInputVisible = false;
    }

    private void ShowCreateBoardModal()
    {
        isCreateBoardModalVisible = true;
    }

    private void CloseCreateBoardModal()
    {
        isCreateBoardModalVisible = false;
    }

    private async Task OnBoardRemove()
    {
        await LoadBoards();
        await LoadLists();
        StateHasChanged();
    }

    private async Task OnListRemove(int listId)
    {
        await LoadLists();
        StateHasChanged();
    }

    private async void CreateBoard()
    {
        if (!String.IsNullOrWhiteSpace(newBoardName))
        {
            isCreateBoardModalVisible = false;
            var response = await Http.PostAsJsonAsync($"api/boards/{projectId}/{userId}", newBoardName);
            if (response.IsSuccessStatusCode)
            {
                await LoadBoards();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode}");
            }
            newBoardName = string.Empty;
        }
    }

    private async Task LoadBoards()
    {
        var response = await Http.GetAsync($"api/boards/{projectId}/{userId}");
        if (response.IsSuccessStatusCode)
        {
            isAuthorized = true;
            boards = await response.Content.ReadFromJsonAsync<IEnumerable<BoardModel>>();
            currentBoard = boards.FirstOrDefault();
        }
        else
        {
            isAuthorized = false;
        }
    }

    private async Task LoadLists()
    {
        var response = await Http.GetAsync($"api/lists/board/{currentBoard?.BoardId}");
        if (response.IsSuccessStatusCode)
        {
            Lists = await response.Content.ReadFromJsonAsync<IEnumerable<List>>();
            if (Lists != null)
            {
                Cards = Lists.SelectMany(l => l.Cards).ToList();
                CardToListMapping = Cards.ToDictionary(card => card.CardId, card => Lists.First(list => list.Cards.Contains(card)).Id);
            }

            StateHasChanged();
        }
    }

    private bool FilterItems(CardModel card, string dropZone)
    {
        return CardToListMapping.TryGetValue(card.CardId, out var listId) && listId.ToString() == dropZone;
    }

    private async Task OnCardDropped(DraggableDroppedEventArgs<CardModel> args)
    {
        // Update card's list ID based on the drop zone
        var card = args.Item;
        var newListId = int.Parse(args.DropZoneName);

        if (CardToListMapping.TryGetValue(card.CardId, out var oldListId) && oldListId != newListId)
        {
            CardToListMapping[card.CardId] = newListId;
            StateHasChanged();

            // Update the database
            // await Http.PutAsJsonAsync($"api/cards/move/{card.Id}", new { ListId = newListId });

            // // Reload lists to reflect changes
            // await LoadListsAndCards();
        }
    }

    private Task OnReordered(DropZoneOrder<CardModel> order)
    {
        Cards = order.OrderedItems.Select(o => o.Item).ToList();

        // Update CardToListMapping with the new order
        foreach (var (card, index) in Cards.Select((card, index) => (card, index)))
        {
            if (CardToListMapping.ContainsKey(card.CardId))
            {
                CardToListMapping[card.CardId] = index + 1; // Update order (1-based index)
            }
        }
        return Task.CompletedTask;
    }

    private async Task AddList()
    {
        if (!string.IsNullOrWhiteSpace(newListName))
        {
            var request = await Http.PostAsJsonAsync($"api/lists/board/{currentBoard?.BoardId}", newListName);
            if (request.IsSuccessStatusCode)
            {
                await LoadLists();
            }
            newListName = string.Empty;
            IsListAddInputVisible = false;
        }
    }

    private void ShowEditBoardModal()
    {
        isEditBoardModalVisible = true;
        Console.WriteLine("Edit board turned on");
    }

    private void CloseEditBoardModal()
    {
        isEditBoardModalVisible = false;
    }

}


<style>
    .transparent-navbar {
        background-color: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(5px);
    }

        .transparent-navbar .nav-link {
            color: #fff;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            cursor: context-menu;
        }

            .transparent-navbar .nav-link.active {
                background-color: rgba(255, 255, 255, 0.4);
                color: #000;
            }

            .transparent-navbar .nav-link:hover {
                background-color: rgba(255, 255, 255, 0.2);
                color: #000;
            }

    .modal-overlay {
        position: fixed;
        top: 0px;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        width: 300px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close-button {
        background-color: transparent;
        border: none;
        font-size: 1.5rem;
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
    }

    .editBoard-button {
        margin-left: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .spinner-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .list-container {
        display: flex;
        gap: 15px;
        padding: 15px;
        align-items: flex-start;
    }

    .card-list {
        width: 250px;
        background-color: #f0f2f4;
        border-radius: 5px;
        padding: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card-item {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 5px 10px;
        margin-bottom: 5px;
        transition: border-color 0.3s ease;
        cursor: pointer;
    }

    .add-list-button {
        width: 15vw;
        background: rgba(0,0,0, 0.45);
        color: white;
        padding: 7px;
        padding-left: 15px;
    }

        .add-list-button img {
            width: 10px;
            height: 10px;
        }

    .add-list-input {
        background: #f1f2f4;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        padding: 8px;
        border-radius: 5%;
        margin: 0;
    }
</style>