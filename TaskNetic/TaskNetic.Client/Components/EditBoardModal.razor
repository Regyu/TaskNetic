@using Blazorise
@inject HttpClient Http
@inject IUserService UserService
@using TaskNetic.Client.DTO

<Modal @bind-Visible="IsVisible" Centered>
    <ModalContent Size="ModalSize.Large" Class="w-100">
        <ModalHeader>
            <ModalTitle>Edit Board</ModalTitle>
            <CloseButton @onclick="Close" />
        </ModalHeader>

        <ModalBody>
            <Tabs SelectedTab="@activeTab" SelectedTabChanged="@SetActiveTab">
                <Items>
                    <Tab Name="general">General</Tab>
                    <Tab Name="team">Team</Tab>
                    <Tab Name="danger">Danger Zone</Tab>
                </Items>

                <Content>
                    <TabPanel Name="general">
                        <div class="my-3 text-center d-flex flex-column justify-content-center align-items-center">
                            <label for="boardName" class="fw-semibold fs-5">Board Name:</label>
                            <TextEdit id="boardName" @bind-Text="@Board.Title"
                                      Class="form-control my-3 text-center" Style="width:50%;" />
                        </div>
                    </TabPanel>

                    <TabPanel Name="team">
                        <table class="table table-hover my-3">
                            <thead>
                                <tr class="text-center">
                                    <th scope="col">User</th>
                                    <th scope="col">Edit Permissions</th>
                                    <th scope="col">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (BoardMembers != null && BoardMembers.Any())
                                {
                                    @foreach (var member in BoardMembers)
                                    {
                                        <tr class="text-center align-middle">
                                            <td>@member.Name</td>
                                            <td class="align-middle">
                                                <Div Class="d-flex justify-content-center">
                                                    <Switch @bind-Checked="@member.CanEdit" Class="mx-auto" />
                                                </Div>
                                            </td>
                                            <td>
                                                <Button Color="Color.Danger" Size="Size.Small"
                                                        Clicked="@(() => RemoveMember(member.Id))">
                                                    Remove
                                                </Button>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" class="text-center">No team members found.</td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <div class="mt-4">
                            <h6>Add a new team member:</h6>
                            <div class="input-group mb-3" style="width:60%;">
                                <TextEdit Placeholder="Enter username"
                                          @bind-Text="@NewMemberUsername"
                                          Class="form-control" />
                                <Button Color="Color.Primary" Clicked="@AddMember">Add Member</Button>
                            </div>

                            @if (!string.IsNullOrEmpty(AddMemberError))
                            {
                                <p class="text-danger">@AddMemberError</p>
                            }
                        </div>
                    </TabPanel>

                    <TabPanel Name="danger">
                        <div class="mt-3 text-center">
                            <h5 class="text-danger mb-3">Deleting a board is irreversible!</h5>
                            <Button Color="Color.Danger" Clicked="@RemoveBoard">Delete Board</Button>
                        </div>
                    </TabPanel>
                </Content>
            </Tabs>
        </ModalBody>

        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@Close">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveChanges">Save Changes</Button>
        </ModalFooter>

    </ModalContent>
</Modal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback OnRemove { get; set; }
    [Parameter] public int projectId { get; set; }
    [Parameter] public BoardModel Board { get; set; }

    private string activeTab { get; set; } = "general";
    private List<BoardMember> BoardMembers { get; set; } = new();
    private string NewMemberUsername { get; set; } = string.Empty;
    private string AddMemberError = string.Empty;

    private void Close()
    {
        IsVisibleChanged.InvokeAsync(false);
    }

    private async Task SetActiveTab(string tabName)
    {
        activeTab = tabName;
        if (tabName == "team")
            await LoadTeamMembers();
    }

    private async Task SaveChanges()
    {
        await Http.PutAsJsonAsync($"api/boards/{Board.BoardId}", Board.Title);
        foreach (var member in BoardMembers)
        {
            var response = await Http.PutAsJsonAsync(
                $"api/boardpermissions/{Board.BoardId}/user/{member.Id}",
                member.CanEdit
            );
        }
        Close();
    }

    private async Task LoadTeamMembers()
    {
        if (Board != null)
        {
            BoardMembers = await Http.GetFromJsonAsync<List<BoardMember>>($"api/boardpermissions/{Board.BoardId}/team");
        }
    }

    private async Task AddMember()
    {
        if (!string.IsNullOrWhiteSpace(NewMemberUsername))
        {
            var currentUserId = await UserService.GetCurrentUserIdAsync();

            if(BoardMembers.Any(m => m.Name == NewMemberUsername))
            {
                AddMemberError = "User is already a member of the team.";
                return;
            }

            var response = await Http.PostAsJsonAsync($"api/boardpermissions", new NewBoardMember(Board.BoardId, NewMemberUsername, false, projectId, currentUserId));
            if (response.IsSuccessStatusCode)
            {
                await LoadTeamMembers();
                NewMemberUsername = string.Empty;
            }
        }
        else
        {
            AddMemberError = "Username cannot be empty.";
        }
    }

    private async Task RemoveMember(string memberId)
    {
        var currentUserId = await UserService.GetCurrentUserIdAsync();

        var request = new HttpRequestMessage(HttpMethod.Delete, $"api/boardpermissions")
            {
                Content = JsonContent.Create(new RemoveBoardMember(Board.BoardId, memberId, currentUserId))
            };

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await LoadTeamMembers();
            StateHasChanged();
        }
    }

    private async Task RemoveBoard()
    {
        await Http.DeleteAsync($"api/boards/{Board.BoardId}");
        await OnRemove.InvokeAsync();
        Close();
    }
}