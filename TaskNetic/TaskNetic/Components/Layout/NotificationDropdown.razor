@inject INotificationService NotificationService
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using TaskNetic.Services.Implementations
@rendermode InteractiveServer

<div class="dropdown-menu @(Show ? "show d-block" : "d-none"); position-absolute end-1 mt-2" style="width: 450px;">
    <div class="dropdown-header">
        Powiadomienia
    </div>
    @if (Notifications.Count() > 0)
    {
        @foreach (var notification in Notifications)
        {
            <div class="dropdown-item d-flex justify-content-between align-items-start">
                <div>
                    <strong>@notification.User</strong>
                    <br />
                    <span>@notification.Message</span>
                </div>
                <button class="btn btn-sm text-danger" @onclick="() => RemoveNotification(notification)">×</button>
            </div>
            <hr class="dropdown-divider" />
        }
    }
    else
    {
        <div class="dropdown-item text-muted">No new notifications</div>
    }
</div>
@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public IEnumerable<Notification> Notifications { get; set; } = Enumerable.Empty<Notification>();

    [Parameter]
    public EventCallback<Notification> OnNotificationRemoved { get; set; }

    private void RemoveNotification(Notification notification)
    {
        Notifications = Notifications.Where(n => n != notification).ToList();
        NotificationService.DeleteNotificationAsync(notification);
        StateHasChanged();
        OnNotificationRemoved.InvokeAsync(notification);
    }
}
