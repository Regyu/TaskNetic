@using TaskNeticDemo.Models;
@using TaskNeticDemo.Services.Interfaces;

@inject IProjectService ProjectService
@inject IApplicationUserService ApplicationUserService
@inject IProjectRoleService ProjectRoleService
@inject INotificationService NotificationService

<div class="modal @(Show ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Project</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>

            <div class="modal-body">
                <ul class="nav nav-tabs" id="editProjectTabs">
                    <li class="nav-item">
                        <a class="nav-link @(activeTab == "general" ? "active" : "")"
                        href="#"
                        @onclick="@(() => SetActiveTab("general"))">General</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(activeTab == "team" ? "active" : "")"
                        href="#"
                        @onclick="@(() => SetActiveTab("team"))">Team</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(activeTab == "background" ? "active" : "")"
                        href="#"
                        @onclick="@(() => SetActiveTab("background"))">Background</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link @(activeTab == "danger zone" ? "active" : "")"
                        href="#"
                        @onclick="@(() => SetActiveTab("danger zone"))">Danger Zone</a>
                    </li>
                </ul>
                @if (activeTab == "general")
                {
                    @if (Project != null)
                    {
                        <div class="my-3 text-center d-flex flex-column justify-content-center align-items-center">
                            <label for="projectName" class="fw-semibold fs-5">Project Name:</label>
                            <InputText id="projectName"
                            @bind-Value="@Project.ProjectName"
                            class="form-control my-3" style="width:50%; text-align:center;"/>
                        </div>
                    }
                    else
                    {
                        <p>Loading project details...</p>
                    }
                }
                else if (activeTab == "team")
                {

                    <table class="table table-hover my-3">
                        <thead>
                            <tr class="text-center">
                                <th scope="col">User</th>
                                <th scope="col">E-mail</th>
                                <th scope="col">Administrator</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (teamMembers != null && teamMembers.Any())
                            {
                                var adminCount = teamMembers.Count(m => m.IsAdmin);
                                var isSingleAdmin = adminCount == 1;

                                @foreach (var member in teamMembers)
                                {
                                    <tr class="text-center align-middle">
                                        <td class="d-flex align-items-center">
                                            <div class="avatar-circle me-2">
                                                @GetInitials(member.Username)
                                            </div>
                                            @member.Username
                                        </td>
                                        <td class="">@member.Email</td>
                                        <td class="text-center">
                                            <div class="form-switch">
                                                <input type="checkbox"
                                                @bind="@member.IsAdmin"
                                                class="form-check-input"
                                                role="switch"
                                                disabled="@(isSingleAdmin && member.IsAdmin)" />
                                            </div>
                                        </td>
                                        <td class="text-center">
                                            @if (!isSingleAdmin || !member.IsAdmin)
                                            {
                                                <button class="btn btn-danger btn-sm"
                                                @onclick="@(() => RemoveMember(member.Id))">
                                                    Delete
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center">No team members found.</td>
                                </tr>
                            }
                        </tbody>

                    </table>

                    <div class="mt-4">
                        <h6>Add your new member of the team:</h6>
                        <div class="input-group mb-3" style="width:60%">
                            <input type="text"
                            placeholder="Enter username"
                            @bind-value="@newMemberUsername"
                            class="form-control" />
                            <button class="btn btn-primary" @onclick="AddMember">Add member</button>
                        </div>
                        @if (!string.IsNullOrEmpty(addMemberError))
                        {
                            <p class="text-danger">@addMemberError</p>
                        }
                    </div>
                }
                else if (activeTab == "background")
                {
                    @if (availableBackgrounds != null && availableBackgrounds.Any())
                    {
                        <div class="mb-3 text-center">
                            <h5 class="py-3">Current Background:</h5>
                            <img src="@currentBackgroundUrl" alt="Current Background" class="img-fluid mb-3"/>
                        </div>

                        <div class="row">
                            @foreach (var background in availableBackgrounds)
                            {
                                <div class="col-md-3 col-sm-4 col-6 mb-3">
                                    <img src="@background"
                                    alt="Available Background"
                                    class="img-thumbnail clickable-thumbnail"
                                    @onclick="@(() => SelectBackground(background))" />
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p>No backgrounds available.</p>
                    }
                }
                else if (activeTab == "danger zone")
                {
                    @if (Project != null)
                    {
                        <div class="mt-3 text-center">
                            <h5 class="text-danger mb-3">Deleting a project is irreversible!</h5>
                            <button type="button"
                            class="btn btn-danger"
                            @onclick="@DeleteProject">
                                Delete Project
                            </button>
                        </div>
                    }
                }
            </div>

            <div class="modal-footer">
                <button type="button"
                class="btn btn-secondary"
                @onclick="@OnCancel">
                    Close
                </button>

                <button type="submit"
                formnovalidate
                class="btn btn-primary"
                @onclick="@SaveChanges">
                    Save changes
                </button>
            </div>
        </div>
    </div>
</div>

@if (Show)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string activeTab = "general";
    [Parameter]
    public bool Show { get; set; }
    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }
    [Parameter]
    public Project? Project { get; set; }
    [Parameter]
    public EventCallback OnSave { get; set; }
    [Parameter]
    public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback ProjectUpdate { get; set; }

    private List<string> availableBackgrounds = new();
    private string currentBackgroundUrl = string.Empty;
    private List<TeamMember> teamMembers = new();
    private string newMemberUsername = string.Empty;
    private string addMemberError = string.Empty;

    private async Task LoadTeamMembers()
    {
        if (Project != null)
        {
            var roles = await ProjectService.GetProjectRoles(Project);
            teamMembers = roles.Select(role => new TeamMember
                {
                    Id = role.ApplicationUser.Id,
                    Username = role.ApplicationUser.UserName,
                    Email = role.ApplicationUser.Email,
                    IsAdmin = role.isAdmin
                }).ToList();
        }
    }

    private async Task LoadAvailableBackgrounds()
    {
        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/backgrounds");

        if (Directory.Exists(folderPath))
        {
            var allBackgrounds = Directory.GetFiles(folderPath, "background*.jpg")
                                          .Select(f => $"/images/backgrounds/{Path.GetFileName(f)}")
                                          .Distinct()
                                          .ToList();

            availableBackgrounds = allBackgrounds;
        }
        else
        {
            availableBackgrounds = new List<string>();
        }
        await Task.CompletedTask;
    }

    private async Task AddMember()
    {
        if (string.IsNullOrWhiteSpace(newMemberUsername))
        {
            addMemberError = "Nazwa użytkownika nie może być pusta.";
            return;
        }

        if (teamMembers.Any(member => member.Username.Equals(newMemberUsername, StringComparison.OrdinalIgnoreCase)))
        {
            addMemberError = "This user is already part of the team.";
            return;
        }

        var user = await ApplicationUserService.GetByUserNameAsync(newMemberUsername);
        var currentUser = await ApplicationUserService.GetCurrentUserAsync();
        var newProjectRole = new ProjectRole
            {
                Project = Project,
                ApplicationUser = user,
                isAdmin = false
            };

        if (user == null)
        {
            addMemberError = "Nie znaleziono użytkownika o podanej nazwie.";
            return;
        }
        try
        {
            foreach (TeamMember teamMember in teamMembers)
            {
                if(currentUser?.Id != teamMember.Id)
                {
                    await NotificationService.AddNotificationAsync(teamMember.Id, user.UserName, $"has been added to the project \"{Project?.ProjectName}\".");
                }
            }

            await ProjectRoleService.AddAsync(newProjectRole);
            await NotificationService.AddNotificationAsync(user.Id, currentUser.UserName, $"has added you to the project \"{Project?.ProjectName}\".");
            await ProjectUpdate.InvokeAsync();

            newMemberUsername = string.Empty;
            addMemberError = string.Empty;
            await LoadTeamMembers();
        }
        catch (Exception ex)
        {
            addMemberError = $"Nie udało się dodać członka: {ex.Message}";
        }
    }


    private void SelectBackground(string backgroundUrl)
    {
        currentBackgroundUrl = backgroundUrl;

        if (Project != null)
        {
            Project.BackgroundImageId = string.Concat(currentBackgroundUrl.Where(Char.IsDigit));
        }
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "??";
        var parts = name.Split(' ');
        return parts.Length > 1 ? $"{parts[0][0]}{parts[1][0]}" : $"{parts[0][0]}";
    }

    private async Task SetActiveTab(string tab)
    {
        activeTab = tab;

        if (tab == "team")
        {
            await LoadTeamMembers();
        }
        else if (tab == "background")
        {
            await LoadAvailableBackgrounds();

            if (Project != null && !string.IsNullOrEmpty(Project.BackgroundImageId))
            {
                currentBackgroundUrl = $"images/backgrounds/background{Project.BackgroundImageId}.jpg";
            }
        }
    }

    private async Task SaveChanges()
    {
        if (Project != null)
        {
            await ProjectService.UpdateAsync(Project);
            foreach (var member in teamMembers)
            {
                await ProjectRoleService.UpdateProjectRoleWithParametersAsync(Project.Id, member.Id, member.IsAdmin);
            }
            await OnSave.InvokeAsync();
            Show = false;
            await ShowChanged.InvokeAsync(false);
        }
    }

    private async Task RemoveMember(string memberId)
    {
        var currentUser = await ApplicationUserService.GetCurrentUserAsync();
        await ProjectRoleService.RemoveUserFromProjectAsync(Project.Id, memberId);
        var user = await ApplicationUserService.GetUserByIdAsync(memberId);
        await LoadTeamMembers();

        foreach (TeamMember teamMember in teamMembers)
        {
            if (currentUser.Id != teamMember.Id)
            {
                await NotificationService.AddNotificationAsync(teamMember.Id, user.UserName, $"has been removed from the project \"{Project?.ProjectName}\".");
            }
        }
        await NotificationService.AddNotificationAsync(memberId, currentUser.UserName, $"has removed you from the project \"{Project?.ProjectName}\".");
        await ProjectUpdate.InvokeAsync();

    }

    private async Task DeleteProject()
    {
        await OnDelete.InvokeAsync();
        Show = false;
        await ShowChanged.InvokeAsync(false);
        await ProjectUpdate.InvokeAsync();
    }

    private void OnCancel()
    {
        Show = false;
        ShowChanged.InvokeAsync(false);
    }
    public class TeamMember
    {
        public string Id { get; set; }
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public bool IsAdmin { get; set; }
    }
}

<style>
    .clickable-thumbnail {
        cursor: pointer;
    }

        .clickable-thumbnail:hover {
            opacity: 0.8;
        }

    .avatar-circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: #007bff;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }
</style>