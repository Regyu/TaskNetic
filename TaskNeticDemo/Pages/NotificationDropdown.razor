@inject INotificationService NotificationService;
@using TaskNeticDemo.Services.Implementations;
@using TaskNeticDemo.Services.Interfaces;
@using TaskNeticDemo.Models;

<div class="dropdown-menu show" style="width: 300px;" @onclick:stopPropagation>
    <ul class="list-group list-group-flush" style="max-height: 60vh; overflow-y: auto;">
        @if (Notifications.Any())
        {
            @foreach (var notification in Notifications)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="text-truncate">
                        <strong>@notification.MentionedUserName</strong>
                        <br />
                        <span style="white-space: normal; word-wrap: break-word;">@notification.Message</span>
                    </div>
                    <button class="btn btn-sm text-danger" @onclick="() => RemoveNotification(notification)">×</button>
                </li>
            }
        }
        else
        {
            <li class="list-group-item text-muted">No notifications</li>
        }
    </ul>
</div>

@code {
    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public List<Notification> Notifications { get; set; } = new();

    [Parameter]
    public EventCallback<Notification> OnNotificationRemoved { get; set; }

    private void RemoveNotification(Notification notification)
    {
        Notifications.Remove(notification);
        StateHasChanged();
        OnNotificationRemoved.InvokeAsync(notification);
    }

    private void CloseDropdown()
    {
        Show = false;
    }
}
